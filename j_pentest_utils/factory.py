#!/usr/bin/env python3
# encoding: utf8

# todo: 切换到python3，放弃gevent，采用asyncio

import os
import sys
import time
import json
import argparse
import traceback
from abc import ABCMeta, abstractmethod

import queue
import gevent
#from gevent import monkey
#    monkey.patch_all()

class BaseFactory( object ):
    __metaclass__ = ABCMeta

    def __init__(self, args):
        self.args = args
        self.job_queue = queue.Queue( 2**16 )
        self.success_queue = queue.Queue( 1024 )
        gevent.spawn( self.manager )
        gevent.spawn( self.success_log )
        for worker_index in xrange( self.args.thread ):
            gevent.spawn( self.worker )

    @abstractmethod
    def do_job(self, job):
        pass

    @abstractmethod
    def manager(self):
        pass

    def success_log(self):
        success_txt_fout = open( 'good.txt', 'ab' )
        while True:
            try:
                s = self.success_queue.get()
                success_txt_fout.write( json.dumps( s ) + '\n' )
                success_txt_fout.flush()
            except:
                traceback.print_exc()
                sys.exc_clear()

    def worker(self):
        while True:
            job = self.job_queue.get()
            try:
                t = gevent.spawn( self.do_job, job )
                t.join( job['timeout'] )
            except Exception as e:
                print ( e.args )
                sys.exc_clear()
